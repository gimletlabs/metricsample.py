/*
 * Copyright 2023- The Gimlet Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package gml.internal.controlplane.metricsreader.v1;

option go_package = "gimletlabs.ai/gimlet/src/controlplane/metricsreader/mrpb/v1;mrpb";

// A list of times and values for data series.
message MetricSample {
  repeated int64 times = 1;
  repeated double values = 2;
}

// HistogramSample has counts for buckets <= bucket_end. The histogram is delta coded (not
// cumulative) like prometheus.
message HistogramSample {
  repeated double bucket_ends = 1;
  repeated double counts = 2;
}

message MetricData {
  string name = 1;
  map<string, string> labels = 2;

  oneof sample_oneof {
    MetricSample metric_sample = 3;
    HistogramSample histogram_sample = 4;
  }
}

message RangeQueryResponse {
  repeated MetricData results = 1;
}

message RangeQueryRequest {
  // The PromQL query string.
  string query = 1;

  // One of relative or (start+end) need to set for the query.
  // Parameter relative specifies the relative time window to query: ex 1m, -15m, -1hr, etc.
  string relative = 2;

  // Start or End are rfc3339 specifying the range for the query.
  string start = 3;
  string stop = 4;

  // This is either a duration like: 1m, 15m, or a float in seconds.
  string step = 5;
}

service MetricsReaderService {
  rpc RangeQuery(RangeQueryRequest) returns (RangeQueryResponse);
}
